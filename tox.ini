[tox]
env_list = py{3.10,3.11,3.12,3.13},py{3.10,3.11,3.12,3.13}-ml,py{3.10,3.11,3.12,3.13}-verify-install,py{310,311,312,313}-notebooks

[gh-actions]
python =
    3.10: py3.10,py3.10-ml,py3.10-verify-install
    3.11: py3.11,py3.11-ml,py3.11-verify-install
    3.12: py3.12,py3.11-ml,py3.12-verify-install
    3.13: py3.13,py3.11-ml,py3.13-verify-install

[testenv]
set_env =
    PYTHONPATH = {toxinidir}
# HTTP_PROXY and HTTPS_PROXY are required behind corporate proxies
pass_env =
    DISPLAY
    XAUTHORITY
    HTTP_PROXY
    HTTPS_PROXY

[testenv:requirements]
base_python = python3.13
skip_install = true
deps =
    pip-tools
commands =
    # remove requirements-*.txt as otherwise the dependencies are not properly updated
    python -c 'import os; os.remove("requirements.txt")  if os.path.exists("requirements.txt") else None'
    python -c 'import os; os.remove("requirements-dev.txt")  if os.path.exists("requirements-dev.txt") else None'
    python -c 'import os; os.remove("requirements-ml.txt")  if os.path.exists("requirements-ml.txt") else None'
    python -m piptools compile -o requirements.txt pyproject.toml
    python -m piptools compile --extra dev -o requirements-dev.txt pyproject.toml
    python -m piptools compile --extra ml -o requirements-ml.txt pyproject.toml

[testenv:py{3.10,3.11,3.12,3.13}]
platform = linux|linux2|darwin
deps =
    -r requirements-dev.txt
set_env =
    BENCHMARK_EPISODES_FOLDER = {tox_root}/episodes
commands =
    python --version
    python -m pytest {posargs} --ignore=tests/ml --ignore=tests/regression

[testenv:py{3.10,3.11,3.12,3.13}-ml]
platform = linux|linux2|darwin
set_env =
    BENCHMARK_EPISODES_FOLDER = {tox_root}/episodes
deps =
    -r requirements-dev.txt
    -r requirements-ml.txt
commands =
    python --version
    python -m pytest --retries 2 --retry-delay 5 {posargs} tests/ml

[testenv:lint]
base_python = python3.13
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    flake8 flatland tests examples benchmarks

[flake8]
exclude = docs
max-line-length = 120
ignore = E121 E126 E123 E128 E133 E226 E241 E242 E704 W291 W293 W391 W503 W504 W505


[testenv:coverage]
base_python = python3.13
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    python scripts/make_coverage.py


[testenv:py{3.10,3.11,3.12,3.13}-profiling]
deps =
    -r requirements-dev.txt
set_env =
    PROFILING_OUTPUT_FOLDER = {work_dir}/{env_name}/log
    SCENARIOS_FOLDER = {tox_root}/scenarios
    NUM_RUNS=5
commands =
    python --version
    python benchmarks/profile_all_examples.py
    python -m pip install graphviz # compatibility with old flatland-rl versions
    python -m jupyter nbconvert --debug --ExecutePreprocessor.timeout=1800 --execute --to notebook --inplace benchmarks/flatland_performance_profiling.ipynb

[testenv:py{3.10,3.11,3.12,3.13}-examples]
platform = linux|linux2|darwin
deps =
    -r requirements-dev.txt
set_env =
    SCENARIOS_FOLDER = {tox_root}/scenarios
commands =
    python --version
    python benchmarks/run_all_examples.py

[testenv:py{3.10,3.11,3.12,3.13}-notebooks]
platform = linux|linux2|darwin
allowlist_externals =
    bash
    pwd
deps =
    -r requirements-dev.txt
commands =
    python --version
    python -m pytest --retries 2 --retry-delay 5 -s --nbmake  \
        notebooks/Agent-Close-Following.ipynb \
        notebooks/flatland_animate.ipynb \
        notebooks/graph_demo.ipynb \
        notebooks/interactiveai.ipynb \
        notebooks/render_episode.ipynb \
        notebooks/scene_editor.ipynb \
        notebooks/simple_example_manual_control.ipynb \
        notebooks/simple-graph-plot-2022.ipynb \
        notebooks/simple_rendering_demo.ipynb \
        notebooks/test_saved_envs.ipynb \
        notebooks/test_service.ipynb \
        notebooks/trajectories.ipynb
# TODO https://github.com/flatland-association/flatland-rl/issues/132 skipped notebooks - drop or run?
# TODO https://github.com/flatland-association/flatland-rl/issues/132 notebooks are mixture of illustration and tests - move test notebooks to tests folder?
; notebooks/agent2.ipynb
; notebooks/colab-animate.ipynb
# TODO https://github.com/flatland-association/flatland-rl/issues/132 run rllib_demo as slow or make ml subfolder?
; notebooks/rllib_demo.ipynb
; notebooks/scene_editor.ipynb
; notebooks/simple-graph-plot-2022.ipynb
; notebooks/simple_animation_demo.ipynb
; notebooks/simple_animation_demo_2.ipynb
; notebooks/simple_env_creation.ipynb
; notebooks/test-service-timeouts.ipynb

[testenv:py{3.10,3.11,3.12}-notebooks-no-pickle]
platform = linux|linux2|darwin
set_env =
    USE_PICKLE = false
allowlist_externals =
    bash
    pwd
deps =
    -r requirements-dev.txt
commands =
    python --version
    python -m pytest -s --nbmake notebooks/test_service.ipynb

[testenv:build]
base_python = python3.13
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    python -m build

[testenv:py{3.10,3.11,3.12,3.13}-verify-install]
# install flatland-rl without additional dependencies
skip_install = false
commands =
    python --version
    python -c 'from flatland.evaluators.service import FlatlandRemoteEvaluationService'
    python -c 'import flatland.integrations.interactiveai.interactiveai'
    evaluator --help
    flatland-demo --help
    flatland-evaluator --help
    flatland-trajectory-evaluate --help
    flatland-trajectory-generate-from-policy --help

[testenv:py{3.10,3.11,3.12,3.13}-verify-requirements]
skip_install = true
deps =
    -r requirements-dev.txt
    -r requirements-ml.txt
set_env =
    # TODO bad code smell: circularity as flatland_baselines has flatland-rl as dependency...
    IGNORED_MISSING_DEPENDENCIES=flatland_baselines
    PINNED_AND_DYNAMICALLY_LOADED_MODULES="cachetools|dm-tree|wandb"
    DEV_MODULES="coverage|deptry|flake8|flake8-eradicate|jupyter|jupyter-core|nbmake|notebook|pip-tools|pytest|pytest-retry|tox"
commands =
    python --version

    # convert notebooks for deptry as deptry parser seems to be buggy ("SyntaxError: Expected a statement at byte range...)
    python -m jupyter nbconvert --ExecutePreprocessor.timeout=1800 --to python  benchmarks/*.ipynb
    python -m jupyter nbconvert --ExecutePreprocessor.timeout=1800 --to python  notebooks/*.ipynb

    # N.B. we allow for modules directly imported to be transitive dependencies: --ignore DEP003

    # requirements.txt covers the core library without flatland/ml
    deptry . --verbose --ignore DEP003 --pep621-dev-dependency-groups dev,ml -ee flatland/ml -ee tests -ee benchmarks -ee notebooks -ee examples --per-rule-ignores "DEP001={env:IGNORED_MISSING_DEPENDENCIES},DEP002={env:PINNED_AND_DYNAMICALLY_LOADED_MODULES}|{env:DEV_MODULES}"

    # requirements-ml.txt covers the core library incl. flatland/ml
    deptry . --ignore DEP003 --pep621-dev-dependency-groups dev -ee tests -ee benchmarks -ee notebooks -ee examples --per-rule-ignores "DEP001={env:IGNORED_MISSING_DEPENDENCIES},DEP002={env:PINNED_AND_DYNAMICALLY_LOADED_MODULES}|{env:DEV_MODULES}"

    # requirements-dev.txt covers everything except flatland/ml and tests/ml
    deptry . --ignore DEP003 --pep621-dev-dependency-groups ml -ee flatland/ml -ee tests/ml -ee "notebooks/rllib_demo.*" --per-rule-ignores "DEP001={env:IGNORED_MISSING_DEPENDENCIES},DEP002={env:PINNED_AND_DYNAMICALLY_LOADED_MODULES}|{env:DEV_MODULES}"

    # requirements-dev.txt + requirements-ml.txt covers everything:
    deptry . --ignore DEP003 --per-rule-ignores "DEP001={env:IGNORED_MISSING_DEPENDENCIES},DEP002={env:PINNED_AND_DYNAMICALLY_LOADED_MODULES}|{env:DEV_MODULES}"


[testenv:py{3.10,3.11,3.12,3.13}-benchmarks]
platform = linux|linux2|darwin
deps =
    -r requirements-dev.txt
set_env =
    BENCHMARK_EPISODES_FOLDER = {tox_root}/episodes
commands =
    python --version
    python -m cProfile -o benchmarks.hprof {work_dir}/{env_name}/bin/py.test  benchmarks/benchmark_episodes.py

[testenv:py{3.10,3.11,3.12,3.13}-regression]
platform = linux|linux2|darwin
deps =
    -r requirements-dev.txt
set_env =
    BENCHMARK_EPISODES_FOLDER = {tox_root}/episodes
    PYTHONPATH = {tox_root}/flatland-baselines
commands =
    python --version
    python -m pytest --retries 2 --retry-delay 5 {posargs} tests/regression
